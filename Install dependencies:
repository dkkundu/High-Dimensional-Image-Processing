To run the application:

Install dependencies:
pip install fastapi uvicorn sqlalchemy tifffile scikit-learn scikit-image celery redis numpy

Start Redis server (for Celery):
redis-server

Start Celery worker:
celery -A main.celery worker --loglevel=info

Start FastAPI server:
uvicorn main:app --reload


Key Features:

Handles large 5D TIFF images using memory mapping
Supports chunked processing for memory efficiency
Implements both synchronous and asynchronous (Celery) processing
Stores metadata and analysis results in SQLite
Includes comprehensive error handling
Validates file formats and parameters
Generates downloadable results for slices and PCA
Supports both Otsu's thresholding and K-means segmentation


Endpoints:

POST /upload: Upload TIFF files
GET /metadata/{id}: Get image dimensions and metadata
GET /slice/{id}: Extract specific slices
POST /analyze/{id}: Perform PCA dimensionality reduction
GET /statistics/{id}: Get channel statistics
This implementation provides a robust foundation for handling scientific imaging workloads while maintaining scalability through asynchronous processing and efficient memory management.